#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Concepts and coding
\end_layout

\begin_layout Subsubsection*
(a)
\end_layout

\begin_layout Standard
What's the output when calling the following commands, and why? Write one
 sentence for each question.
\end_layout

\begin_layout Standard
What's the output when calling the following commands, and why? Write one
 sentence for each question.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\texttt{np.mean([1, 2, 3])}$
\end_inset

,
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\texttt{np.array([1, 2, 3])+1}$
\end_inset

,
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\texttt{np.zeros(10)}$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Solution:
\end_layout

\begin_layout Enumerate
The output is 
\begin_inset Formula $2$
\end_inset

, since 
\begin_inset Formula $2$
\end_inset

 is the mean of 
\begin_inset Formula $[1,2,3]$
\end_inset

 and 
\begin_inset Formula $\texttt{np.mean}$
\end_inset

 returns the mean of an array.
\end_layout

\begin_layout Enumerate
The output is 
\begin_inset Formula $[2,3,4]$
\end_inset

, as 
\begin_inset Formula $\texttt{np.array([1, 2, 3])+1}=\texttt{np.array([1, 2, 3])+np.array([1, 1, 1])}$
\end_inset

 since the operation is vectorized.
\end_layout

\begin_layout Enumerate
The function 
\begin_inset Formula $\texttt{np.zeros(n)}$
\end_inset

 returns an array of 
\begin_inset Formula $n$
\end_inset

 zeroes, hence 
\begin_inset Formula $\texttt{np.zeros(10)}=[0,0,0,0,0,0,0,0,0,0]$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
(b)
\end_layout

\begin_layout Standard
Consider the code 
\begin_inset Formula $\texttt{np.array([1, 2, 3]) + [1, 2, 3]}.$
\end_inset

 
\end_layout

\begin_layout Enumerate
What happens when you run this code? Write at most two sentences.
\end_layout

\begin_layout Enumerate
Name three other operations that behaves like
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Formula $\texttt{"+"}$
\end_inset

 does above.
\end_layout

\begin_layout Subsubsection*
Solution:
\end_layout

\begin_layout Enumerate
It does pointwise addition of the array and list and returns an array, so
 that 
\begin_inset Formula $\texttt{np.array([1, 2, 3]) + [1, 2, 3]=np.array([2, 4, 6])}$
\end_inset

.
\end_layout

\begin_layout Enumerate
Standard mathematical operations such as 
\begin_inset Formula $*,-,/,$
\end_inset

 and 
\begin_inset Formula $**$
\end_inset

.
 
\end_layout

\begin_layout Subsubsection*
(c)
\end_layout

\begin_layout Enumerate
Why does 
\begin_inset Formula $\texttt{np.random.default\_rng(seed = 313).random(10)}$
\end_inset

return the same vector every time you run it?
\end_layout

\begin_layout Enumerate
How can you modify to return a different vector?
\end_layout

\begin_layout Subsubsection*
Solution:
\end_layout

\begin_layout Enumerate
This happens because the 
\begin_inset Formula $\texttt{np.random.default\_rng(seed = 313)}$
\end_inset

object initializes a new random state every time it is created.
\end_layout

\begin_layout Enumerate
You must supply another seed argument, e.g.
 
\begin_inset Formula $\texttt{np.random.default\_rng(seed = 13).random(10)}$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
(d)
\end_layout

\begin_layout Standard
Consider the following function.
 
\end_layout

\begin_layout Verbatim

	def fun(n):   
\end_layout

\begin_layout Verbatim

		x = np.zeros(n)
\end_layout

\begin_layout Verbatim

		x[0] = 1
\end_layout

\begin_layout Verbatim

		for i in range(n - 1):         
\end_layout

\begin_layout Verbatim

			x[i + 1] = 1 + x[i]     
\end_layout

\begin_layout Verbatim

		return(x)
\end_layout

\begin_layout Enumerate
What does this function do? Explain using two sentences.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\texttt{numpy}$
\end_inset

 contains a function that does exactly the same.
 What is its name?
\end_layout

\begin_layout Subsubsection*
Solution:
\end_layout

\begin_layout Enumerate
The function takes a positive integer 
\begin_inset Formula $n$
\end_inset

 and returns the vector 
\begin_inset Formula $[1,2,3,\ldots,n]$
\end_inset

.
\end_layout

\begin_layout Enumerate
That function's name was supposed to be 
\begin_inset Formula $\texttt{np.arange}$
\end_inset

, but then 
\begin_inset Formula $x[0]=1$
\end_inset

 shouldn't have been included, hence you must write 
\begin_inset Formula $\texttt{np.arange(n)+1}$
\end_inset

 instead.
 (This is a mistake in the mock exam; the final exam is far more thoroughly
 checked.)
\end_layout

\begin_layout Section
Random walks
\end_layout

\begin_layout Standard
We'll take a close look at some code from one of the videos.
 
\end_layout

\begin_layout Verbatim

    import numpy as np
\end_layout

\begin_layout Verbatim

	n_reps = 10 ** 5
\end_layout

\begin_layout Verbatim

	n = 100
\end_layout

\begin_layout Verbatim

	rng = np.random.default_rng(seed = 313)
\end_layout

\begin_layout Standard
We will study a function from video 2 on random walks.
\end_layout

\begin_layout Verbatim

	def fun(n, rng, n_reps = 10 ** 5):
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    	bs = np.apply_along_axis(
\end_layout

\begin_layout Verbatim

       	 func1d = np.cumsum, 
\end_layout

\begin_layout Verbatim

        	axis = 1, 
\end_layout

\begin_layout Verbatim

       	 arr = rng.integers(low = -1, high = 2, size = (n_reps, n)))
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    	results = np.apply_along_axis(
\end_layout

\begin_layout Verbatim

       	 func1d = np.max, 
\end_layout

\begin_layout Verbatim

        	axis = 1, 
\end_layout

\begin_layout Verbatim

        	arr = bs)     
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    	uniques, counts = np.unique(results, return_counts = True)
\end_layout

\begin_layout Verbatim

    	return {"result" : uniques, "probability" : counts / n_reps}
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Standard
Use at most two sentences for each of the following questions.
\end_layout

\begin_layout Subsubsection*
(a) 
\end_layout

\begin_layout Standard
What is the rôle of 
\begin_inset Formula $\texttt{n}$
\end_inset

 and 
\begin_inset Formula $\texttt{n\_reps}$
\end_inset

? Write one sentence for each.
\end_layout

\begin_layout Subsubsection*
Solution:
\end_layout

\begin_layout Standard
\begin_inset Formula $\texttt{n}$
\end_inset

 is the number of steps of the random walk.
 
\begin_inset Formula $\texttt{n\_reps}$
\end_inset

 is the number of times we simulate a random walk.
\end_layout

\begin_layout Subsubsection*
(b) 
\end_layout

\begin_layout Standard
What is the rôle of 
\begin_inset Formula $\texttt{func1d}$
\end_inset

, and what does 
\begin_inset Formula $\texttt{np.max}$
\end_inset

 do?
\end_layout

\begin_layout Subsubsection*
Solution:
\end_layout

\begin_layout Standard
The function in 
\begin_inset Formula $\texttt{func1d}$
\end_inset

 is applied to every row (since 
\begin_inset Formula $\texttt{axis = 1 }$
\end_inset

) of the array supplied to 
\begin_inset Formula $\texttt{arr}$
\end_inset

 .
 
\begin_inset Formula $\texttt{np.max}$
\end_inset

 returns the maximal element of an array.
\end_layout

\begin_layout Subsubsection*
(c) 
\end_layout

\begin_layout Standard
What is the data type of 
\begin_inset Formula $\texttt{bs}$
\end_inset

? What do you call each row of 
\begin_inset Formula $\texttt{bs}$
\end_inset

? 
\end_layout

\begin_layout Subsubsection*
Solution:
\end_layout

\begin_layout Standard
\begin_inset Formula $\texttt{bs}$
\end_inset

 is a numpy array.
 The rows of 
\begin_inset Formula $\texttt{bs}$
\end_inset

 are random walks.
\end_layout

\begin_layout Subsubsection*
(d) 
\end_layout

\begin_layout Standard
Explain what 
\begin_inset Formula $\texttt{results}$
\end_inset

 is.
 
\end_layout

\begin_layout Subsubsection*
Solution:
\end_layout

\begin_layout Standard
\begin_inset Formula $\texttt{results}$
\end_inset

 is an array of 
\begin_inset Formula $\texttt{n\_reps}$
\end_inset

 simulated maximums of random walks with 
\begin_inset Formula $n$
\end_inset

 steps.
\end_layout

\begin_layout Subsubsection*
(e) 
\end_layout

\begin_layout Standard
What does 
\begin_inset Formula $\texttt{np.unique}$
\end_inset

 do in this function? Remember the 
\begin_inset Formula $\texttt{return\_counts}$
\end_inset

 argument!
\end_layout

\begin_layout Subsubsection*
Solution
\end_layout

\begin_layout Standard
\begin_inset Formula $\texttt{np.unique}$
\end_inset

 usually returns all the unique elements in 
\begin_inset Formula $\texttt{results}$
\end_inset

, but since 
\begin_inset Formula $\texttt{return\_counts}$
\end_inset

 is true, it returns the counts of each element as well.
 These are returned as a tuple of the form 
\begin_inset Formula $\texttt{(uniques, counts)}$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
(f) 
\end_layout

\begin_layout Standard
What is returned by the function? 
\end_layout

\begin_layout Subsubsection*
Solution:
\end_layout

\begin_layout Standard
The function returns a dictionary where the keys are the unique simulated
 maximums and the values are the probabilities of attaining that maximum.
\end_layout

\end_body
\end_document
